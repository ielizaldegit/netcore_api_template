// <auto-generated />
using System;
using Infrastructure.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrator.MSSQL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221223181907_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Core.Domain.Entities.Mail.Activation", b =>
                {
                    b.Property<Guid>("ActivationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("activation_id")
                        .HasColumnOrder(1)
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(4);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("ActivationId");

                    b.HasIndex("UserId");

                    b.ToTable("activation", "mail");
                });

            modelBuilder.Entity("Core.Domain.Entities.Mail.Template", b =>
                {
                    b.Property<int>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("template_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemplateId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("content")
                        .HasColumnOrder(5);

                    b.Property<bool>("IsCustom")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsHtml")
                        .HasColumnType("bit")
                        .HasColumnName("is_html")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("subject")
                        .HasColumnOrder(3);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("url")
                        .HasColumnOrder(4);

                    b.HasKey("TemplateId");

                    b.ToTable("template", "mail");

                    b.HasData(
                        new
                        {
                            TemplateId = 1,
                            Content = "",
                            IsCustom = true,
                            IsHtml = true,
                            Name = "activation_account",
                            Subject = "Activa tu cuenta",
                            Url = "https://gestordoc.blob.core.windows.net/swplus-20220927/email-templates/activate-account.html"
                        },
                        new
                        {
                            TemplateId = 2,
                            Content = "",
                            IsCustom = true,
                            IsHtml = true,
                            Name = "forgot_password",
                            Subject = "¿Olvidaste tu contraseña?",
                            Url = "https://gestordoc.blob.core.windows.net/swplus-20220927/email-templates/new-password-request.html"
                        },
                        new
                        {
                            TemplateId = 3,
                            Content = "",
                            IsCustom = true,
                            IsHtml = true,
                            Name = "welcome",
                            Subject = "Bienvenido",
                            Url = "https://gestordoc.blob.core.windows.net/swplus-20220927/email-templates/welcome.html"
                        });
                });

            modelBuilder.Entity("Core.Entities.Audit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("audit_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AffectedColumns")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("affected_columns")
                        .HasColumnOrder(10);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("date")
                        .HasColumnOrder(7);

                    b.Property<string>("IpAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("ip_address")
                        .HasColumnOrder(4);

                    b.Property<string>("NewValues")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("new_values")
                        .HasColumnOrder(9);

                    b.Property<string>("OldValues")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("old_values")
                        .HasColumnOrder(8);

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("primary_key")
                        .HasColumnOrder(11);

                    b.Property<string>("TableName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("table_name")
                        .HasColumnOrder(6);

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type")
                        .HasColumnOrder(3);

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("user_agent")
                        .HasColumnOrder(5);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("audit", "dbo");
                });

            modelBuilder.Entity("Core.Entities.Auth.Module", b =>
                {
                    b.Property<int>("ModuleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("module_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModuleId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasColumnOrder(13);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by")
                        .HasColumnOrder(12);

                    b.Property<string>("CssClass")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("css_class")
                        .HasColumnOrder(6);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(5);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order")
                        .HasColumnOrder(8);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(10);

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("is_visible")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasColumnOrder(15);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id")
                        .HasColumnOrder(11);

                    b.Property<string>("Route")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("route")
                        .HasColumnOrder(7);

                    b.Property<string>("Subtitle")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("subtitle")
                        .HasColumnOrder(4);

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title")
                        .HasColumnOrder(3);

                    b.HasKey("ModuleId");

                    b.HasIndex("ParentId");

                    b.ToTable("module", "auth");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3470),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-house",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsVisible = false,
                            Name = "Home",
                            Subtitle = "Inicio",
                            Title = "Inicio"
                        },
                        new
                        {
                            ModuleId = 2,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3510),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-gear",
                            Description = "",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsVisible = false,
                            Name = "Settings",
                            Subtitle = "Configuracion general",
                            Title = "Configuración"
                        },
                        new
                        {
                            ModuleId = 3,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3580),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-file-lines",
                            Description = "",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsVisible = false,
                            Name = "Reports",
                            Subtitle = "Reportes del sistema",
                            Title = "Reportes"
                        },
                        new
                        {
                            ModuleId = 4,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3590),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-square-poll-vertical",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Dashboard",
                            ParentId = 1,
                            Route = "/site/dashboard",
                            Subtitle = "Panel principal",
                            Title = "Dashboard"
                        },
                        new
                        {
                            ModuleId = 5,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3590),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-users",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Users",
                            ParentId = 2,
                            Route = "/site/config/users",
                            Subtitle = "Administracion de usuarios",
                            Title = "Usuarios"
                        },
                        new
                        {
                            ModuleId = 6,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3600),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-cubes",
                            Description = "",
                            DisplayOrder = 2,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Modules",
                            ParentId = 2,
                            Route = "/site/config/modules",
                            Subtitle = "Administracion de módulos",
                            Title = "Módulos"
                        },
                        new
                        {
                            ModuleId = 7,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3600),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-id-badge",
                            Description = "",
                            DisplayOrder = 3,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Roles",
                            ParentId = 2,
                            Route = "/site/config/roles",
                            Subtitle = "Administracion de roles",
                            Title = "Roles"
                        },
                        new
                        {
                            ModuleId = 8,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3610),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-user-shield",
                            Description = "",
                            DisplayOrder = 4,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Permissions",
                            ParentId = 2,
                            Route = "/site/config/permissions",
                            Subtitle = "Administracion de permisos",
                            Title = "Permisos"
                        },
                        new
                        {
                            ModuleId = 9,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3610),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-rectangle-list",
                            Description = "",
                            DisplayOrder = 5,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Catalogues",
                            ParentId = 2,
                            Subtitle = "Administracion de catálogos",
                            Title = "Catálogos"
                        },
                        new
                        {
                            ModuleId = 10,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3610),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-envelope-open-text",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsVisible = true,
                            Name = "MailTemplate",
                            ParentId = 9,
                            Route = "/site/config/catalogues/mail-templates",
                            Subtitle = "Administración de plantillas",
                            Title = "Plantillas de correo"
                        },
                        new
                        {
                            ModuleId = 11,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 761, DateTimeKind.Local).AddTicks(3620),
                            CreatedBy = 1,
                            CssClass = "fa-solid fa-wave-square",
                            Description = "",
                            DisplayOrder = 1,
                            IsActive = true,
                            IsVisible = true,
                            Name = "Activity",
                            ParentId = 3,
                            Route = "/site/reports/activity",
                            Subtitle = "Reporte de actividad por usuario del sistema",
                            Title = "Actividad"
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.ModulePermission", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id")
                        .HasColumnOrder(1);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(2);

                    b.HasKey("ModuleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("module_permission", "auth");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 2,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 3,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 4,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 5,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 5,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 6,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 6,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 6,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 6,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 7,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 7,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 7,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 7,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 8,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 8,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 8,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 8,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 9,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 10,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 10,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 11,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 11,
                            PermissionId = 5
                        },
                        new
                        {
                            ModuleId = 11,
                            PermissionId = 6
                        },
                        new
                        {
                            ModuleId = 11,
                            PermissionId = 7
                        },
                        new
                        {
                            ModuleId = 11,
                            PermissionId = 8
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.ModuleRole", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id")
                        .HasColumnOrder(1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(2);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(3);

                    b.HasKey("ModuleId", "RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("module_role", "auth");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 2,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 3,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 4,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 5,
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 5,
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 6,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 6,
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 6,
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 6,
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 7,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 7,
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 7,
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 7,
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 8,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 8,
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 8,
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 8,
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 9,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            RoleId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 10,
                            RoleId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 10,
                            RoleId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 11,
                            RoleId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 11,
                            RoleId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            ModuleId = 11,
                            RoleId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            ModuleId = 11,
                            RoleId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            ModuleId = 11,
                            RoleId = 1,
                            PermissionId = 8
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.ModuleUser", b =>
                {
                    b.Property<int>("ModuleId")
                        .HasColumnType("int")
                        .HasColumnName("module_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(3);

                    b.HasKey("ModuleId", "UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("module_user", "auth");

                    b.HasData(
                        new
                        {
                            ModuleId = 1,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 2,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 3,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 4,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 5,
                            UserId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 5,
                            UserId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 5,
                            UserId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 6,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 6,
                            UserId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 6,
                            UserId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 6,
                            UserId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 7,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 7,
                            UserId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 7,
                            UserId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 7,
                            UserId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 8,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 8,
                            UserId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 8,
                            UserId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 8,
                            UserId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 9,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 10,
                            UserId = 1,
                            PermissionId = 2
                        },
                        new
                        {
                            ModuleId = 10,
                            UserId = 1,
                            PermissionId = 3
                        },
                        new
                        {
                            ModuleId = 10,
                            UserId = 1,
                            PermissionId = 4
                        },
                        new
                        {
                            ModuleId = 11,
                            UserId = 1,
                            PermissionId = 1
                        },
                        new
                        {
                            ModuleId = 11,
                            UserId = 1,
                            PermissionId = 5
                        },
                        new
                        {
                            ModuleId = 11,
                            UserId = 1,
                            PermissionId = 6
                        },
                        new
                        {
                            ModuleId = 11,
                            UserId = 1,
                            PermissionId = 7
                        },
                        new
                        {
                            ModuleId = 11,
                            UserId = 1,
                            PermissionId = 8
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"), 1L, 1);

                    b.Property<string>("CssClass")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("css_class")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(5);

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int")
                        .HasColumnName("display_order")
                        .HasColumnOrder(7);

                    b.Property<string>("DisplayText")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("display_text")
                        .HasColumnOrder(3);

                    b.Property<bool?>("Grouping")
                        .HasMaxLength(200)
                        .HasColumnType("bit")
                        .HasColumnName("grouping")
                        .HasColumnOrder(6);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(9);

                    b.Property<bool?>("IsVisible")
                        .HasColumnType("bit")
                        .HasColumnName("is_visible")
                        .HasColumnOrder(8);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id")
                        .HasColumnOrder(10);

                    b.HasKey("PermissionId");

                    b.HasIndex("ParentId");

                    b.ToTable("permission", "auth");

                    b.HasData(
                        new
                        {
                            PermissionId = 1,
                            CssClass = "",
                            Description = "",
                            DisplayOrder = 1,
                            DisplayText = "Access",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = false,
                            Name = "access"
                        },
                        new
                        {
                            PermissionId = 2,
                            CssClass = "fa-solid fa-circle-plus",
                            Description = "Crear nuevo",
                            DisplayOrder = 2,
                            DisplayText = "Nuevo",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "create"
                        },
                        new
                        {
                            PermissionId = 3,
                            CssClass = "fa-solid fa-pen-to-square",
                            Description = "Actualizar",
                            DisplayOrder = 3,
                            DisplayText = "Actualizar",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "update"
                        },
                        new
                        {
                            PermissionId = 4,
                            CssClass = "fa-solid fa-eraser",
                            Description = "Eliminar",
                            DisplayOrder = 4,
                            DisplayText = "Eliminar",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "delete"
                        },
                        new
                        {
                            PermissionId = 5,
                            CssClass = "fa-solid fa-file-export",
                            Description = "Exportar",
                            DisplayOrder = 5,
                            DisplayText = "Exportar",
                            Grouping = true,
                            IsActive = true,
                            IsVisible = true,
                            Name = "export"
                        },
                        new
                        {
                            PermissionId = 6,
                            CssClass = "fa-solid fa-file-excel",
                            Description = "Exportar a Excel",
                            DisplayOrder = 1,
                            DisplayText = "Excel",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "excel",
                            ParentId = 5
                        },
                        new
                        {
                            PermissionId = 7,
                            CssClass = "fa-solid fa-file-pdf",
                            Description = "Exportar a PDF",
                            DisplayOrder = 2,
                            DisplayText = "PDF",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "pdf",
                            ParentId = 5
                        },
                        new
                        {
                            PermissionId = 8,
                            CssClass = "fa-solid fa-file-csv",
                            Description = "Exportar a CSV",
                            DisplayOrder = 3,
                            DisplayText = "CSV",
                            Grouping = false,
                            IsActive = true,
                            IsVisible = true,
                            Name = "csv",
                            ParentId = 5
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("RoleId");

                    b.ToTable("role", "auth");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            Description = "",
                            IsActive = true,
                            Name = "Root"
                        },
                        new
                        {
                            RoleId = 2,
                            Description = "",
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            RoleId = 3,
                            Description = "",
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasColumnOrder(10);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by")
                        .HasColumnOrder(9);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email")
                        .HasColumnOrder(4);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("email_confirmed")
                        .HasColumnOrder(6);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsTemporaryPassword")
                        .HasColumnType("bit")
                        .HasColumnName("is_temporary_password")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasColumnOrder(12);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(11);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("password")
                        .HasColumnOrder(3);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("role_id")
                        .HasColumnOrder(5);

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("user", "auth");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 764, DateTimeKind.Local).AddTicks(3230),
                            Email = "ielizalde@swplus.com.mx",
                            EmailConfirmed = true,
                            IsActive = true,
                            IsTemporaryPassword = false,
                            Name = "ielizalde@swplus.com.mx",
                            Password = "AQAAAAEAACcQAAAAEAvkiEeQxy1Hy8UyXthH/+YaySd3JjAaRoqZ74PMA/Svv9M0sY25C0qmBLLOToJh2A==",
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("City")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("city")
                        .HasColumnOrder(6);

                    b.Property<string>("Country")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("country")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasColumnOrder(16);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by")
                        .HasColumnOrder(15);

                    b.Property<string>("ExteriorNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("exterior_number")
                        .HasColumnOrder(9);

                    b.Property<string>("InteriorNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("interior_number")
                        .HasColumnOrder(10);

                    b.Property<double>("Latitude")
                        .HasColumnType("float")
                        .HasColumnName("latitude")
                        .HasColumnOrder(13);

                    b.Property<double>("Longitude")
                        .HasColumnType("float")
                        .HasColumnName("longitude")
                        .HasColumnOrder(14);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasColumnOrder(18);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(17);

                    b.Property<string>("Municipality")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("municipality")
                        .HasColumnOrder(5);

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("postal_code")
                        .HasColumnOrder(12);

                    b.Property<string>("Reference")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("reference")
                        .HasColumnOrder(11);

                    b.Property<string>("Settlement")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("settlement")
                        .HasColumnOrder(7);

                    b.Property<string>("State")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("state")
                        .HasColumnOrder(4);

                    b.Property<string>("Street")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("street")
                        .HasColumnOrder(8);

                    b.Property<string>("Type")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("type")
                        .HasColumnOrder(2);

                    b.HasKey("AddressId");

                    b.ToTable("address", "person");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            City = "CDMX",
                            Country = "México",
                            ExteriorNumber = "1400",
                            InteriorNumber = "202",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Municipality = "Benito Juárez",
                            PostalCode = "03303",
                            Reference = "Junto al LuckySushi",
                            Settlement = "Portales Norte",
                            State = "CDMX",
                            Street = "Dr. Jose Maria Vertiz",
                            Type = "Domicilio particular"
                        },
                        new
                        {
                            AddressId = 2,
                            City = "CDMX",
                            Country = "México",
                            ExteriorNumber = "1400",
                            InteriorNumber = "202",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Municipality = "Benito Juárez",
                            PostalCode = "03303",
                            Reference = "Junto al LuckySushi",
                            Settlement = "Portales Norte",
                            State = "CDMX",
                            Street = "Dr. Jose Maria Vertiz",
                            Type = "Domicilio particular"
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("gender_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("code")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("gender", "person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "M",
                            Description = "",
                            IsActive = true,
                            Name = "Masculino"
                        },
                        new
                        {
                            Id = 2,
                            Code = "F",
                            Description = "",
                            IsActive = true,
                            Name = "Femenino"
                        },
                        new
                        {
                            Id = 3,
                            Code = "-",
                            Description = "",
                            IsActive = true,
                            Name = "No-binario"
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("marital_status_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("code")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("marital_status", "person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "S",
                            Description = "",
                            IsActive = true,
                            Name = "Soltero"
                        },
                        new
                        {
                            Id = 2,
                            Code = "C",
                            Description = "",
                            IsActive = true,
                            Name = "Casado"
                        },
                        new
                        {
                            Id = 3,
                            Code = "V",
                            Description = "",
                            IsActive = true,
                            Name = "Viudo"
                        },
                        new
                        {
                            Id = 4,
                            Code = "D",
                            Description = "",
                            IsActive = true,
                            Name = "Divorciado"
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.Person", b =>
                {
                    b.Property<int>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("person_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonId"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id")
                        .HasColumnOrder(6);

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("birthdate")
                        .HasColumnOrder(8);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasColumnOrder(18);

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by")
                        .HasColumnOrder(17);

                    b.Property<string>("Curp")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("curp")
                        .HasColumnOrder(15);

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("email")
                        .HasColumnOrder(10);

                    b.Property<int?>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("gender_id")
                        .HasColumnOrder(5);

                    b.Property<string>("HomePhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("home_phone")
                        .HasColumnOrder(11);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("lastname")
                        .HasColumnOrder(3);

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("int")
                        .HasColumnName("marital_status_id")
                        .HasColumnOrder(7);

                    b.Property<string>("MiddleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("middlename")
                        .HasColumnOrder(4);

                    b.Property<string>("MobilePhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("mobile_phone")
                        .HasColumnOrder(12);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("modified_at")
                        .HasColumnOrder(20);

                    b.Property<int?>("ModifiedBy")
                        .HasColumnType("int")
                        .HasColumnName("modified_by")
                        .HasColumnOrder(19);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.Property<string>("OfficePhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("office_phone")
                        .HasColumnOrder(13);

                    b.Property<string>("Photo")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("photo")
                        .HasColumnOrder(16);

                    b.Property<string>("Rfc")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("rfc")
                        .HasColumnOrder(14);

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("title")
                        .HasColumnOrder(9);

                    b.HasKey("PersonId");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("person", "person");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            AddressId = 1,
                            Birthdate = new DateTime(1983, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 763, DateTimeKind.Local).AddTicks(3350),
                            Curp = "",
                            Email = "ielizalde@swplus.com.mx",
                            GenderId = 1,
                            HomePhone = "",
                            LastName = "Elizalde",
                            MaritalStatusId = 1,
                            MiddleName = "Hernandez",
                            MobilePhone = "5514735111",
                            Name = "Ivan",
                            OfficePhone = "",
                            Photo = "https://gestordoc.blob.core.windows.net/swplus-20220927/assets/avatar.png",
                            Rfc = "EIHI831111",
                            Title = "Ing"
                        },
                        new
                        {
                            PersonId = 2,
                            AddressId = 2,
                            Birthdate = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedAt = new DateTime(2022, 12, 23, 12, 19, 6, 763, DateTimeKind.Local).AddTicks(3370),
                            Curp = "",
                            Email = "ielizaldejr@swplus.com.mx",
                            GenderId = 1,
                            HomePhone = "",
                            LastName = "Elizalde",
                            MaritalStatusId = 1,
                            MiddleName = "",
                            MobilePhone = "5514735111",
                            Name = "Ivan Jr",
                            OfficePhone = "",
                            Photo = "https://gestordoc.blob.core.windows.net/swplus-20220927/assets/avatar.png",
                            Rfc = "EIHI831111",
                            Title = ""
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.PersonUser", b =>
                {
                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnName("person_id")
                        .HasColumnOrder(1);

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id")
                        .HasColumnOrder(2);

                    b.Property<bool?>("Principal")
                        .HasColumnType("bit")
                        .HasColumnName("principal")
                        .HasColumnOrder(4);

                    b.Property<int?>("RelationshipId")
                        .HasColumnType("int")
                        .HasColumnName("relationship_id")
                        .HasColumnOrder(3);

                    b.HasKey("PersonId", "UserId");

                    b.HasIndex("RelationshipId");

                    b.HasIndex("UserId");

                    b.ToTable("person_user", "person");

                    b.HasData(
                        new
                        {
                            PersonId = 1,
                            UserId = 1,
                            Principal = true
                        },
                        new
                        {
                            PersonId = 2,
                            UserId = 1,
                            Principal = false,
                            RelationshipId = 1
                        });
                });

            modelBuilder.Entity("Core.Entities.Persons.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("relationship_id")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("code")
                        .HasColumnOrder(4);

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("description")
                        .HasColumnOrder(3);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("name")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.ToTable("relationship", "person");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "H",
                            Description = "",
                            IsActive = true,
                            Name = "Hijo"
                        },
                        new
                        {
                            Id = 2,
                            Code = "E",
                            Description = "",
                            IsActive = true,
                            Name = "Esposo(a)"
                        },
                        new
                        {
                            Id = 3,
                            Code = "P",
                            Description = "",
                            IsActive = true,
                            Name = "Padre"
                        },
                        new
                        {
                            Id = 4,
                            Code = "M",
                            Description = "",
                            IsActive = true,
                            Name = "Madre"
                        },
                        new
                        {
                            Id = 5,
                            Code = "M",
                            Description = "",
                            IsActive = true,
                            Name = "Abuelo(a)"
                        },
                        new
                        {
                            Id = 6,
                            Code = "M",
                            Description = "",
                            IsActive = true,
                            Name = "Tutor"
                        });
                });

            modelBuilder.Entity("Core.Domain.Entities.Mail.Activation", b =>
                {
                    b.HasOne("Core.Entities.Auth.User", "User")
                        .WithMany("Activations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Auth.Module", b =>
                {
                    b.HasOne("Core.Entities.Auth.Module", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entities.Auth.ModulePermission", b =>
                {
                    b.HasOne("Core.Entities.Auth.Module", "Module")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.Permission", "Permission")
                        .WithMany("ModulePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("Core.Entities.Auth.ModuleRole", b =>
                {
                    b.HasOne("Core.Entities.Auth.Module", "Module")
                        .WithMany("ModuleRoles")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.Permission", "Permission")
                        .WithMany("ModuleRoles")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.Role", "Role")
                        .WithMany("ModuleRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Auth.ModuleUser", b =>
                {
                    b.HasOne("Core.Entities.Auth.Module", "Module")
                        .WithMany("ModuleUsers")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.Permission", "Permission")
                        .WithMany("ModuleUsers")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Auth.User", "User")
                        .WithMany("ModuleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Auth.Permission", b =>
                {
                    b.HasOne("Core.Entities.Auth.Permission", "Parent")
                        .WithMany("Childs")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.HasOne("Core.Entities.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Core.Entities.Persons.Person", b =>
                {
                    b.HasOne("Core.Entities.Persons.Address", "Address")
                        .WithMany("Persons")
                        .HasForeignKey("AddressId");

                    b.HasOne("Core.Entities.Persons.Gender", "Gender")
                        .WithMany("Persons")
                        .HasForeignKey("GenderId");

                    b.HasOne("Core.Entities.Persons.MaritalStatus", "MaritalStatus")
                        .WithMany("Persons")
                        .HasForeignKey("MaritalStatusId");

                    b.Navigation("Address");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");
                });

            modelBuilder.Entity("Core.Entities.Persons.PersonUser", b =>
                {
                    b.HasOne("Core.Entities.Persons.Person", "Person")
                        .WithMany("PersonUsers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Persons.Relationship", "Relationship")
                        .WithMany("PersonUsers")
                        .HasForeignKey("RelationshipId");

                    b.HasOne("Core.Entities.Auth.User", "User")
                        .WithMany("PersonUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Relationship");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Auth.Module", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ModulePermissions");

                    b.Navigation("ModuleRoles");

                    b.Navigation("ModuleUsers");
                });

            modelBuilder.Entity("Core.Entities.Auth.Permission", b =>
                {
                    b.Navigation("Childs");

                    b.Navigation("ModulePermissions");

                    b.Navigation("ModuleRoles");

                    b.Navigation("ModuleUsers");
                });

            modelBuilder.Entity("Core.Entities.Auth.Role", b =>
                {
                    b.Navigation("ModuleRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Entities.Auth.User", b =>
                {
                    b.Navigation("Activations");

                    b.Navigation("ModuleUsers");

                    b.Navigation("PersonUsers");
                });

            modelBuilder.Entity("Core.Entities.Persons.Address", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Core.Entities.Persons.Gender", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Core.Entities.Persons.MaritalStatus", b =>
                {
                    b.Navigation("Persons");
                });

            modelBuilder.Entity("Core.Entities.Persons.Person", b =>
                {
                    b.Navigation("PersonUsers");
                });

            modelBuilder.Entity("Core.Entities.Persons.Relationship", b =>
                {
                    b.Navigation("PersonUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
